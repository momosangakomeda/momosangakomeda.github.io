------------------------------------------------------------------------------
以下の説明中の N はコマンドの直前に回数指定ができることを示す。
------------------------------------------------------------------------------
左右の移動

|h|     N  h            左に N 桁移動 (CTRL-H, <BS>, <Left> キーでも同じ)
|l|     N  l            右に N 桁移動 (<Space>, <Right> キーでも同じ)
|0|        0            行の先頭に移動 (<Home> キーでも同じ)
|^|        ^            行の先頭(但し空白文字類以外)に移動
|$|     N  $            行の末尾に移動。(N-1行、下に移動) (<End> キーでも同じ)
|g0|       g0           画面上の行の先頭に移動。(複数行にまたがる時の動きが"0" と違う)
|g^|       g^           画面上の行の先頭(但し空白文字類以外)に移動。(複数行にまたがる時の動きが "^" と違う)
|g$|    N  g$           行の末尾に移動。(複数行にまたがる時の動きが "$" と違う)
|gm|       gm           現在行の中央(端末の横幅の半分の桁位置)に移動
|bar|   N  |            N桁目に移動。(デフォルトは１)
|f|     N  f{char}      現在位置から右方向にあるN個目の{char}に移動
|F|     N  F{char}      現在位置から左方向にあるN個目の{char}に移動
|t|     N  t{char}      現在位置から右方向にあるN個目の{char}の左側に移動
|T|     N  T{char}      現在位置から左方向にあるN個目の{char}の右側に移動
|;|     N  ;            直前の "f", "F", "t", "T" を N 回繰り返す。
|,|     N  ,            直前の "f", "F", "t", "T" を逆方向に N 回繰り返す。

------------------------------------------------------------------------------
上下の移動

|k|     N  k            上に N 行移動 (CTRL-P, <Up> キーでも同じ)
|j|     N  j            下に N 行移動 (CTRL-J, CTRL-N, <NL>, <Down> でも同じ)
|-|     N  -            上に N 行移動し、行頭の非空白文字に移動
|+|     N  +            下に N 行移動し、行頭の非空白文字に移動(CTRL-M, <CR>キーでも同じ)
|_|     N  _            下に N-1 行移動し、行頭の非空白文字に移動
|G|     N  G            N 行目(デフォルトは最後の行)に移動し、行頭の非空白文字に移動
|gg|    N  gg           N 行目(デフォルトは１行目)に移動し、行頭の非空白文字に移動
|N%|    N  %            ファイルの N パーセント目に移動。このコマンドは N の指定が必須。
|gk|    N  gk           画面上で N 行上に移動。(複数行にまたがる行がある場合の動きが "k" と異なる)
|gj|    N  gj           画面上で N 行下に移動。(複数行にまたがる行がある場合の動きが "j" と異なる)
------------------------------------------------------------------------------
テキスト文脈単位の移動

|w|     N  w            N 個目の単語分、先に進む
|W|     N  W            空白で区切られた単語(=|WORD|) N 個分、先に進む
|e|     N  e            N 個目の単語のお尻まで進む
|E|     N  E            空白で区切られた単語(=|WORD|) N 個目のお尻まで進む
|b|     N  b            N 個目の単語分、前に戻る
|B|     N  B            空白で区切られた単語(=|WORD|) N 個分、前に戻る
|ge|    N  ge           N 個目の単語のお尻まで戻る
|gE|    N  gE           空白で区切られた単語(=|WORD|) N 個目のお尻まで戻る

|)|     N  )            N センテンス(文)分、先に進む
|(|     N  (            N センテンス分、前に戻る
|}|     N  }            N パラグラフ(段落)分、先に進む
|{|     N  {            N パラグラフ分、前に戻る
|]]|    N  ]]           N セクション(章)分、先に進み、その先頭に移動
|[[|    N  [[           N セクション(章)分、前に戻り、その先頭に移動
|][|    N  ][           N セクション(章)分、先に進み、その末尾に移動
|[]|    N  []           N セクション(章)分、前に戻り、その末尾に移動
|[(|    N  [(           N 個目の呼応していない '(' まで戻る
|[{|    N  [{           N 個目の呼応していない '{' まで戻る
|[m|    N  [m           N 個前のメソッドの先頭まで戻る(Java用)
|[M|    N  [M           N 個前のメソッドの末尾まで戻る(Java用)
|])|    N  ])           N 個目の呼応していない ')' まで進む
|]}|    N  ]}           N 個目の呼応していない '}' まで進む
|]m|    N  ]m           N 個先のメソッドの先頭まで進む(Java用)
|]M|    N  ]M           N 個先のメソッドの末尾まで進む(Java用)
|[#|    N  [#           N 個目の呼応していない "#if" や "#else" まで戻る
|]#|    N  ]#           N 個目の呼応していない "#else" や "#endif" まで進む
|[star| N  [*           N 個前のコメントの先頭まで戻る
|]star| N  ]*           N 個先のコメントの末尾まで進む
------------------------------------------------------------------------------
パターン検索

|/|     N  /{pattern}[/[offset]]<CR>
                        N 回目の{pattern}を含む個所を下方向に検索
|?|     N  ?{pattern}[?[offset]]<CR>
                        N 回目の{pattern}を含む個所を上方向に検索
|/<CR>| N  /<CR>        直前と同じ条件の検索を下方向に対して実施
|?<CR>| N  ?<CR>        直前と同じ条件の検索を上方向に対して実施
|n|     N  n            直前の検索を再実行
|N|     N  N            直前の検索を逆方向に再実行
|star|  N  *            カーソル位置にある単語を下方向に検索
|#|     N  #            カーソル位置にある単語を上方向に検索
|gstar| N  g*           "*" と同じだが、部分的な一致を検索
|g#|    N  g#           "#" と同じだが、部分的な一致を検索
|gd|       gd           カーソル位置の識別子のローカル宣言に移動
|gD|       gD           カーソル位置の識別子のグローバル宣言に移動

|pattern|               検索パターンでの特殊文字の扱い

                        meaning               magic   nomagic
                          任意の１文字に一致    .       \.
                                  行頭に一致    ^       ^
                                 <EOL>に一致    $       $
                            単語の先頭に一致    \<      \<
                            単語の末尾に一致    \>      \>
                    指定の範囲の１文字に一致    [a-z]   \[a-z]
                指定の範囲にない１文字に一致    [^a-z]  \[^a-z]
                          識別子の文字に一致    \i      \i
                上の条件から数字を除いたもの    \I      \I
                        キーワード文字に一致    \k      \k
                上の条件から数字を除いたもの    \K      \K
              ファイル名(で使える)文字に一致    \f      \f
                上の条件から数字を除いたもの    \F      \F
                          表示可能文字に一致    \p      \p
                上の条件から数字を除いたもの    \P      \P
                            空白文字類に一致    \s      \s
                        空白文字類以外に一致    \S      \S

                                 <Esc>に一致    \e      \e
                                 <Tab>に一致    \t      \t
                                  <CR>に一致    \r      \r
                                  <BS>に一致    \b      \b

            直前に指定したatomと0回以上一致     *       \*
            直前に指定したatomと1回以上一致     \+      \+
      直前に指定した文字と0回もしくは1回一致    \=      \=
            直前に指定した文字と2回?5回一致    \{2,5}  \{2,5}
                       2種類の正規表現を列記    \|      \|
          パターンをグループ化してatomとする    \(\)    \(\)

|search-offset|         検索パターンでのオフセット指定

    [num]       [num] 行下の１桁目
    +[num]      [num] 行下の１桁目
    -[num]      [num] 行上の１桁目
    e[+num]     一致した文字列の最後から [num] 桁右
    e[-num]     一致した文字列の最後から [num] 桁左
    s[+num]     一致した文字列の先頭から [num] 桁右
    s[-num]     一致した文字列の先頭から [num] 桁左
    b[+num]     上の s[+num] の別名 (begin の b)
    b[-num]     上の s[-num] の別名 (begin の b)
    ;{search-command}   次の{search-command}を実行する。
------------------------------------------------------------------------------
マークと移動

|m|        m{a-zA-Z}    現在の場所を {a-zA-Z} としてマーク
|`a|       `{a-z}       編集中のファイルのマーク{a-z} に移動
|`A|       `{A-Z}       任意のファイルのマーク{A-Z} に移動
|`0|       `{0-9}       vimが前回終了した時の場所に移動
|``|       ``           直前のジャンプコマンドの前の場所に移動
|`quote|   `"           前回このファイルを編集した時の場所に移動
|`[|       `[           直前に繰作もしくはプットした文字列の先頭に移動
|`]|       `]           直前に繰作もしくはプットした文字列の末尾に移動
|`<|       `<           (直前の)ビジュアルエリアの先頭に移動
|`>|       `>           (直前の)ビジュアルエリアの末尾に移動
|`.|       `.           このファイルで最後に変更した場所に移動
|'|        '{a-zA-Z0-9[]'"<>.}
                        ` と同じだが、その行の先頭の非空白文字まで移動する
                        点が異なる。
|:marks|  :marks        現在設定されているマークを一覧表示
|CTRL-O|  N  CTRL-O     ジャンプリストの N 番目に古い場所に移動
|CTRL-I|  N  CTRL-I     ジャンプリストの N 番目に新しい場所に移動
|:ju|     :ju[mps]      ジャンプリストを一覧表示
------------------------------------------------------------------------------
*Q_vm*          雑多な移動コマンド

|%|        %            呼応するカッコ類 ("(", "[", "{") や、コメント、"#if"/
                        "#else"/"#endif" のペアを検索して移動
|H|     N  H            画面上で N 行目の最初の非空白文字に移動
|M|        M            画面上の真ん中の行の最初の非空白文字に移動
|L|     N  L            画面上で下から N 行目の最初の非空白文字に移動

|go|    N  go                   現バッファの N バイト目に移動
|:go|   :[range]go[to] [off]    現バッファの [off] バイト目に移動
------------------------------------------------------------------------------
*Q_ta*          タグの利用

|:ta|      :ta[g][!] {tag}      {tag}で指定したタグにジャンプ
|:ta|      :[count]ta[g][!]     タグリストの[count]番目に新しいタグにジャンプ
|CTRL-]|      CTRL-]            変更がされていない限り、カーソル位置にあるタ
                                グにジャンプ
|:ts|      :ts[elect][!] [tag]  タグに合致する一覧を表示し、ジャンプ先を選択
|:tjump|   :tj[ump][!] [tag]    指定のタグ [tag] にジャンプ。もし、合致する
                                タグが複数ある時は一覧から選択
|:ltag|    :lt[ag][!] [tag]     タグ [tag] にジャンプし、マッチしたタグを
                                ロケーションリストに加える。
|:tags|    :tags                タグリストを一覧表示
|CTRL-T|   N  CTRL-T            タグリストの N 番目に古いタグにジャンプ
|:po|      :[count]po[p][!]     タグリストの [count] 番目に古いタグにジャンプ
|:tnext|   :[count]tn[ext][!]   [count] 個分、次のタグにジャンプ
|:tp|      :[count]tp[revious][!] [count]個分、前のタグにジャンプ
|:tr|      :[count]tr[ewind][!] [count]番目に一致するタグにジャンプ
|:tl|      :tl[ast][!]          直前に一致したタグにジャンプ

|:ptag|    :pt[ag] {tag}        {tag}タグを見るためのプレビュー画面を開く
|CTRL-W_}|    CTRL-W }          CTRL-] と同様だがプレビュー画面にジャンプ
|:pts|     :pts[elect]          ":tselect" と同様だがプレビュー画面にジャンプ
|:ptjump|  :ptj[ump]            ":tjump" と同様だがプレビュー画面にジャンプ
|:pclose|  :pc[lose]            タグプレビュー画面を閉じる。
|CTRL-W_z|    CTRL-W z          タグプレビュー画面を閉じる。
------------------------------------------------------------------------------
*Q_sc*          スクロール

|CTRL-E|        N  CTRL-E       画面を N 行下方向スクロール(デフォルトは1)
|CTRL-D|        N  CTRL-D       画面を N 行下方向スクロール(デフォルトは画面
                                の半分)
|CTRL-F|        N  CTRL-F       画面を N ページ分下方向スクロール
|CTRL-Y|        N  CTRL-Y       画面を N 行分上方向スクロール(デフォルトは1)
|CTRL-U|        N  CTRL-U       画面を N 行分上方向スクロール(デフォルトは画面
                                の半分)
|CTRL-B|        N  CTRL-B       画面を N ページ分上方向スクロール
|z<CR>|            z<CR> or zt  現在行を画面の１行目にして、再描画
|z.|               z.    or zz  現在行を画面の中央にして、再描画
|z-|               z-    or zb  現在行を画面の最下行にして、再描画

以下は 'wrap' がoffになっている時のみ有効である。
|zh|            N  zh           画面を N 文字、右へスクロール
|zl|            N  zl           画面を N 文字、左へスクロール
|zH|            N  zH           画面桁数の半分だけ、右へスクロール
|zL|            N  zL           画面桁数の半分だけ、左へスクロール
------------------------------------------------------------------------------
*Q_in*          文字列の挿入

|a|             N  a    カーソル位置の後に文字列を(N回)追加
|A|             N  A    現在行の末尾に文字列を(N回)追加
|i|             N  i    カーソル位置の前に文字列を(N回)追加(<Insert>も同様)
|I|             N  I    現在行の最初の非空白文字の前に文字列を(N回)追加
|gI|            N  gI   現在行の先頭に文字列を(N回)追加
|o|             N  o    現在行の下に新たな行を追加し、文字列を(N回)追加する。
|O|             N  O    現在行に新たな行を挿入し、文字列を(N回)追加する。
|:startinsert|  :star[tinsert][!]  挿入モードを開始する。[!]を指定すると
                        追加モードとなる。
|:startreplace| :startr[eplace][!]  置換モードを開始する。[!]を指定すると
                        行末から開始する。

ビジュアルモード用:
|v_b_I|    I    選択している全行の前に、同じ文字列を挿入する。
|v_b_A|    A    選択している全行の後ろに、同じ文字列を挿入する。
------------------------------------------------------------------------------
*Q_ai*          挿入モードの扱い

|insert-index|  挿入モードのアルファベット順目次

挿入モードの終了:
|i_<Esc>|       <Esc>             挿入モードを終わって、ノーマルモードへ復帰
|i_CTRL-C|      CTRL-C            <Esc>と同様。ただし、短縮形は展開しない
|i_CTRL-O|      CTRL-O {command}  {command}を実行し、挿入モードへ復帰

移動:
|i_<Up>|        cursor keys       カーソルを上下左右に移動
|i_<S-Left>|    shift-left/right  １単語ごと左右に移動
|i_<S-Up>|      shift-up/down     １画面ごと前後に移動
|i_<End>|       <End>             その行の最終桁に移動
|i_<Home>|      <Home>            その行の先頭桁に移動
------------------------------------------------------------------------------
*Q_ss*          挿入モードでの特殊キー

|i_CTRL-V|      CTRL-V {char}..   指定の{char}、もしくは10進数指定のバイト値
                                  を挿入
|i_<NL>|        <NL> or <CR> or CTRL-M or CTRL-J
                                  改行して、新しい行を作成
|i_CTRL-E|      CTRL-E            カーソル位置の直下の行の内容を１文字挿入
|i_CTRL-Y|      CTRL-Y            カーソル位置の真上の行の内容を１文字挿入

|i_CTRL-A|      CTRL-A            直前に挿入した文字列をもう一度挿入
|i_CTRL-@|      CTRL-@            直前に挿入した文字列をもう一度挿入し、挿入
                                  モードから復帰
|i_CTRL-R|      CTRL-R {0-9a-z%#:.-="}  指定のレジスタの内容を挿入

|i_CTRL-N|      CTRL-N            カーソルの前にあるキーワードと合致する単語
                                  を順方向に検索して挿入
|i_CTRL-P|      CTRL-P            カーソルの前にあるキーワードと合致する単語
                                  を逆方向に検索して挿入
|i_CTRL-X|      CTRL-X ...        カーソルの前にある単語をいろんな方法で補完
                                  する。

|i_<BS>|        <BS> or CTRL-H    カーソルの前の１文字を削除
|i_<Del>|       <Del>             カーソル位置の１文字を削除
|i_CTRL-W|      CTRL-W            カーソル位置の１単語を削除
|i_CTRL-U|      CTRL-U            現在行で入力した全部の文字を削除
|i_CTRL-T|      CTRL-T            'shiftwidth' での指定分のインデントを現在行
                                  の行頭に挿入
|i_CTRL-D|      CTRL-D            'shiftwidth' での指定分のインデントを現在行
                                  の行頭から削除
|i_0_CTRL-D|    0 CTRL-D          現在行の全インデントを削除
|i_^_CTRL-D|    ^ CTRL-D          現在行の全インデントを削除。但し、次の行の
                                  インデントには影響しない。
------------------------------------------------------------------------------
*Q_di*          ダイグラフ

|:dig|     :dig[raphs]          現在のダイグラフ情報を一覧表示
|:dig|     :dig[raphs] {char1}{char2} {number} ...
                                ダイグラフ情報をリストに追加

挿入モード、又はコマンドラインモード:
|i_CTRL-K|      CTRL-K {char1} {char2}
                                ダイグラフの入力
|i_digraph|     {char1} <BS> {char2}
                                'digraph' オプションがONの場合、ダイグラフを入
                                力
------------------------------------------------------------------------------
*Q_si*          特殊な挿入コマンド

|:r|       :r [file]       カーソル位置の後ろに [file] の内容を挿入
|:r!|      :r! {command}   カーソル位置の後ろに {command} を実行した結果の
                           標準出力の内容を挿入
------------------------------------------------------------------------------
*Q_de*          文字列の削除

|x|     N  x            カーソル位置及びその後ろの N 文字を削除
|<Del>| N  <Del>        カーソル位置及びその後ろの N 文字を削除
|X|     N  X            カーソル位置の前の N 文字を削除
|d|     N  d{motion}    {motion}で指定された範囲の文字列を削除
|v_d|      {visual}d    ハイライト化された文字列を削除
|dd|    N  dd           N 行削除
|D|     N  D            (N-1 行後の)行末まで削除
|J|     N  J            N-1 行を結合して１行に(<EOL>を削除)
|v_J|      {visual}J    ビジュアルモードで選択された文字列を結合
|gJ|    N  gJ           "J" と同じだが、行の間にスペースを入れない
|v_gJ|     {visual}gJ   "{visual}J" と同じだが、行の間にスペースを入れない
|:d|    :[range]d [x]   [range]で指定した範囲の行を削除 [それをレジスタxに]
------------------------------------------------------------------------------
*Q_cm*          文字列のコピーと移動

|quote|   "{char}       レジスタ{char}を指定。これに続いて、削除コマンドや
                        ヤンクコマンド、プットコマンドを指定
|:reg|    :reg          全レジスタの内容を表示
|:reg|    :reg {arg}    {arg}で示されたレジスタの内容を表示
|y|       N  y{motion}  {motion}で指定された範囲の文字列をレジスタにヤンク
                        (コピー)
|v_y|        {visual}y  ハイライト化された文字列をレジスタにヤンク
|yy|      N  yy         N 行をレジスタにヤンク
|Y|       N  Y          N 行をレジスタにヤンク
|p|       N  p          カーソル位置の後にレジスタ内容をN回プット(ペースト)
|P|       N  P          カーソル位置の前にレジスタ内容をN回プット(ペースト)
|]p|      N  ]p         pと同じだが、インデントを現在行に合せる
|[p|      N  [p         Pと同じだが、インデントを現在行に合せる
|gp|      N  gp         pと同じだが、挿入した文字列の後にカーソルを移動
|gP|      N  gP         Pと同じだが、挿入した文字列の後にカーソルを移動
------------------------------------------------------------------------------
*Q_ch*          文字列の変更

|r|       N  r{char}    N 文字を{char}に置換
|gr|      N  gr{char}   N 文字をレイアウトに影響を与えずに置換
                        {訳注: "あ" を "ra"  で置換 -> "a"
                               "あ" を "gra" で置換 -> "a "}
|R|       N  R          置換モードへ (入力文字列を N 回繰り返す)
|gR|      N  gR         仮想置換モードへ。置換モードと同じだが、レイアウト
                        に影響しない。
|v_b_r|      {visual}r{char}
                        ビジュアルブロックモード用: 選択範囲の各文字を{char}
                        で、置換

        (この節における「変更」とは、文字列を削除し、挿入モードに入ること)
|c|       N  c{motion}  {motion}で指定した範囲の文字列を変更
|v_c|        {visual}c  ビジュアルモードで選択された文字列を変更
|cc|      N  cc         N 行を変更
|S|       N  S          N 行を変更
|C|       N  C          (N-1 行後の)行末までを変更
|s|       N  s          N 文字を変更
|v_b_c|      {visual}c  矩形ビジュアルモード用:選ばれている各行の内容を
                        入力した文字列に置き換え
|v_b_C|      {visual}C  矩形ビジュアルモード用:選ばれている各行の行末ま
                        でを入力した文字列に置き換え

|~|       N  ~          N 文字分の英文字の大文字/小文字を変換し、カーソルを
                        移動
|v_~|        {visual}~  ビジュアルモードで選択された範囲の大文字/小文字を変換
|v_u|        {visual}u  ビジュアルモードで選択された範囲を小文字に変換
|v_U|        {visual}U  ビジュアルモードで選択された範囲を大文字に変換
|g~|         g~{motion} {motion}で指定した範囲の大文字/小文字を変換
|gu|         gu{motion} {motion}で指定した範囲を小文字に変換
|gU|         gU{motion} {motion}で指定した範囲を大文字に変換
|v_g?|       {visual}g? ビジュアルモードで選択した範囲をrot13でエンコードす
る。
|g?|         g?{motion} {motion}で指定した範囲をrot13でエンコードする。
                        {訳注: rot13というのはA->N,B->Oという置き換えのシーザ
                               暗号のこと。英語圏では昔から使われている。}

|CTRL-A|  N  CTRL-A     カーソル位置もしくは後ろにある数字にNを加算する
|CTRL-X|  N  CTRL-X     カーソル位置もしくは後ろにある数字からNを減算する

|<|       N  <{motion}  {motion}で指定した範囲を 'shiftwidth' 分、インデントを
                        減らす
|<<|      N  <<         カレント行から N 行分のインデントを減らす
|>|       N  >{motion}  {motion}で指定した範囲を 'shiftwidth' 分、インデントを
                        増やす
|>>|      N  >>         カレント行から N 行分のインデントを増やす
|gq|      N  gq{motion} {motion}で指定した範囲を 'textwidth' で指定した長さに
                        フォーマット
|:ce|     :[range]ce[nter] [width]
                        [range]の行範囲をセンタリング
|:le|     :[range]le[ft] [indent]
                        [range]の行範囲を([indent] 分)左寄せ
|:ri|     :[range]ri[ght] [width]
                        [range]の行範囲を([width] 桁まで)右寄せ
------------------------------------------------------------------------------
*Q_co*          複雑な変更処理

|!|        N  !{motion}{command}<CR>
                        {motion}で指定した範囲を{command}の結果出力に置き換え
|!!|       N  !!{command}<CR>
                        N 行を{command}の結果出力に置き換え
|v_!|         {visual}!{command}<CR>
                        ビジュアルモードで選択された範囲を{command}の結果出力
                        に置き換え
|:range!|  :[range]! {command}<CR>
                        [range] の範囲を{command}の結果出力に置き換え
|=|        N  ={motion}
                        {motion}で指定した範囲を'equalprg'の結果出力に置き換え
|==|       N  ==        N 行を'equalprg'の結果出力に置き換え
|v_=|         {visual}=
                        ビジュアルモードで選択された範囲を'equalprg'の結果出力
                        に置き換え
|:s|       :[range]s[ubstitute]/{pattern}/{string}/[g][c]
                        [range]の範囲の{pattern}を{string}に置換する。
                        [g]を指定すると、見つかった全{pattern}を置換。
                        [c]を指定すると、各置換を確認する。
|:s|       :[range]s[ubstitute] [g][c]
                        直前の ":s" を新たな範囲とオプションで繰り返す
|&|           &         直前の ":s" を現在行について繰り返す。(オプションなし)
|:ret|     :[range]ret[ab][!] [tabstop]
                        'tabstop' の値を変更し、それに従って空白、TABの類を
                        適切な状態にする。
------------------------------------------------------------------------------
*Q_vi*          ビジュアルモード

|visual-index|  ビジュアルモードコマンドの目次

|v|        v            文字単位のビジュアルモードを開始 } カーソルを動かして
|V|        V            行単位のビジュアルモードを開始   } 選択した範囲に対し
|CTRL-V|   CTRL-V       矩形ビジュアルモードを開始       } コマンドを実行
|v_o|      o            カーソル位置と選択範囲の開始位置を入れ替え
|gv|       gv           直前の選択範囲を選んだ状態でビジュアルモードを開始
|v_v|      v            文字単位ビジュアルモードを開始、もしくは中断
|v_V|      V            行単位ビジュアルモードを開始、もしくは中断
|v_CTRL-V| CTRL-V       矩形ビジュアルモードを開始、もしくは中断
------------------------------------------------------------------------------
*Q_to*          文字列オブジェクト (ビジュアルモードか、オペレータ指定後)

|v_aw|     N  aw        "a word" を選択(単語の前後の空白も削除)
|v_iw|     N  iw        "inner word" を選択(正味の単語だけを削除)
|v_aW|     N  aW        "a |WORD|" を選択
|v_iW|     N  iW        "inner |WORD|" を選択
|v_as|     N  as        "a sentence" を選択
|v_is|     N  is        "inner sentence" を選択
|v_ap|     N  ap        "a paragraph" を選択
|v_ip|     N  ip        "inner paragraph" を選択
|v_ab|     N  ab        "a block" ("[(" 〜 "])" の範囲) を選択
|v_ib|     N  ib        "inner block" ("[(" 〜 "])" の範囲) を選択
|v_aB|     N  aB        "a Block" ("[{" 〜 "]}" の範囲) を選択
|v_iB|     N  iB        "inner Block" ("[{" 〜 "]}" の範囲) を選択
|v_a>|     N  a>        "a <> block" を選択
|v_i>|     N  i>        "inner <> block" を選択
|v_at|     N  at        "a tag block" (<aaa> 〜 </aaa>)を選択
|v_it|     N  it        "inner tag block" (<aaa> 〜 </aaa>)を選択
|v_a'|     N  a'        "a single quoted string" を選択
|v_i'|     N  i'        "inner single quoted string" を選択
|v_aquote| N  a"        "a double quoted string" を選択
|v_iquote| N  i"        "inner double quoted string" を選択
|v_a`|     N  a`        "a backward quoted string" を選択
|v_i`|     N  i`        "inner backward quoted string" を選択

------------------------------------------------------------------------------
*Q_re*          繰り返しコマンド

|.|        N  .         直前のコマンドを繰り返す。(回数はN回となる)
|q|           q{a-z}    入力された文字群をレジスタ{a-z}に記録
|q|           q{A-Z}    入力された文字群をレジスタ{a-z}に追加して記録
|q|           q         記録を終了
|@|        N  @{a-z}    レジスタ{a-z}の内容を N 回実行
|@@|       N  @@        直前の@{a-z} を N 回実行
|:@|          :@{a-z}   レジスタ{a-z}の内容をExコマンドとみなして、N回実行
|:@@|         :@@       直前の:@{a-z} を N 回実行
|:g|          :[range]g[lobal]/{pattern}/[cmd]
                        [range]の中で、指定の{pattern}に合致する各行に対して
                        [cmd]コマンド(デフォルトでは ":p")を実行する。
|:g|       :[range]g[lobal]!/{pattern}/[cmd]
                        [range]の中で、指定の{pattern}に合致**しない**各行に
                        対して[cmd]コマンド(デフォルトでは ":p")を実行する。
|:so|      :so[urce] {file}
                        {file}からExコマンドを読み出す。
|:so|      :so[urce]! {file}
                        {file}からvimコマンドを読み出す。
|:sl|      :sl[eep] [sec]
                        [sec] 秒間の間、何もしない
|gs|       N  gs        N 秒間の間、何もしない
------------------------------------------------------------------------------
*Q_km*          キーマップ

|:map|       :ma[p] {lhs} {rhs}   ノーマルモード/ビジュアルモードで{lhs} を
                                  {rhs} に割り付け
|:map!|      :ma[p]! {lhs} {rhs}  挿入モード/コマンドラインモードで{lhs} を
                                  {rhs} に割り付け
|:noremap|   :no[remap][!] {lhs} {rhs}
                                  ":map" と同じだが、{rhs}の再割り付けしない
|:unmap|     :unm[ap] {lhs}       ノーマルモード/ビジュアルモード用の {lhs}
                                  定義を削除
|:unmap!|    :unm[ap]! {lhs}      挿入モード/コマンドラインモード用の {lhs}
                                  定義を削除
|:map_l|     :ma[p] [lhs]         ノーマルモード/ビジュアルモード用の( [lhs]
                                  で始まる) マップを一覧表示
|:map_l!|    :ma[p]! [lhs]        挿入モード/コマンドラインモード用の( [lhs]
                                  で始まる) マップを一覧表示
|:cmap|      :cmap/:cunmap/:cnoremap
                                  ":map!"/":unmap!"/":noremap!" と同じだが、
                                  コマンドラインモードのみ対象となる。
|:imap|      :imap/:iunmap/:inoremap
                                  ":map!"/":unmap!"/":noremap!" と同じだが、
                                  挿入モードのみ対象となる。
|:nmap|      :nmap/:nunmap/:nnoremap
                                  ":map!"/":unmap!"/":noremap!" と同じだが、
                                  ノーマルモードのみ対象となる。
|:vmap|      :vmap/:vunmap/:vnoremap
                                  ":map!"/":unmap!"/":noremap!" と同じだが、
                                  ビジュアルモードのみ対象となる。
|:omap|      :omap/:ounmap/:onoremap
                                  ":map!"/":unmap!"/":noremap!" と同じだが、
                                  オペレータ待機モードのみ対象となる。
|:mapc|      :mapc[lear]          ノーマルモード/ビジュアルモード用のマップを
                                  削除
|:mapc|      :mapc[lear]!         挿入モード/コマンドモード用のマップを削除
|:imapc|     :imapc[lear]         挿入モード用のマップを削除
|:vmapc|     :vmapc[lear]         ビジュアルモード用のマップを削除
|:omapc|     :omapc[lear]         オペレータ待機モード用のマップを削除
|:nmapc|     :nmapc[lear]         ノーマルモード用のマップを削除
|:cmapc|     :cmapc[lear]         コマンドラインモード用のマップを削除
|:mkexrc|    :mk[exrc][!] [file]  現在のマップ、短縮形、設定を [file] に書き
                                  出す。(デフォルトは ".exrc" で、[!] をつけ
                                  ると上書きとなる)
|:mkvimrc|   :mkv[imrc][!] [file]
                                  ":mkexrc" と同じ。但しデフォルトは ".vimrc"
|:mksession| :mks[ession][!] [file]
                                  ":mkvimrc" と同じ。ただし、現在のセッション
                                  を後で続けられるように、現在のファイル名、
                                  ウィンドウ情報などもいっしょに書き出す。
------------------------------------------------------------------------------
*Q_ab*          短縮入力

|:abbreviate|   :ab[breviate] {lhs} {rhs}  短縮形 {lhs} を {rhs} で定義
|:abbreviate|   :ab[breviate] {lhs}        {lhs}で始まる短縮形を一覧表示
|:abbreviate|   :ab[breviate]              全短縮形を一覧表示
|:unabbreviate| :una[bbreviate] {lhs}      {lhs}の短縮形を削除
|:noreabbrev|   :norea[bbrev] [lhs] [rhs]  ":ab" と同じだが、 [rhs]の再定義は
                                           しない
|:iabbrev|      :iab/:iunab/:inoreab       ":ab" と同じだが、挿入モード用のみ
                                           が対象
|:cabbrev|      :cab/:cunab/:cnoreab       ":ab" と同じだが、コマンドライン
                                           モード用のみが対象
|:abclear|      :abc[lear]                 全短縮形を削除
|:cabclear|     :cabc[lear]                コマンドライン用の全短縮形を削除
|:iabclear|     :iabc[lear]                挿入モード用の全短縮形を削除
------------------------------------------------------------------------------
*Q_op*          オプション

|:set|          :se[t]                    変更した全オプションを表示
|:set|          :se[t] all                termcap以外の全オプションを表示
|:set|          :se[t] termcap            termcapオプションを表示
|:set|          :se[t] {option}           論理値タイプの場合はオプション設定
                                          (ONになる)
                                          文字列、数値タイプでは内容を表示
|:set|          :se[t] no{option}         論理値タイプのオプションをOFFに
|:set|          :se[t] inv{option}        論理値タイプのオプションを反転。
|:set|          :se[t] {option}={value}   文字列/数値タイプのオプションの値
                                          を{value}に
|:set|          :se[t] {option}+={value}  文字列タイプのオプションに{value}
                                          を追加数値タイプなら加算
|:set|          :se[t] {option}-={value}  文字列タイプのオプションから{value}
                                          を除去
                                          数値タイプなら{value}を減算
|:set|          :se[t] {option}?          {option}の値を表示
|:set|          :se[t] {option}&          {option}の値をデフォルト値に

|:setlocal|     :setl[ocal]               ":set" と同じ、ただしローカル値を設
                                          定する。
|:setglobal|    :setg[lobal]              ":set" と同じ、ただしローカルオプ
                                          ションのグローバル値を設定する。

|:fix|          :fix[del]                 't_kb' の値に従って、't_kD' の値を
                                          セットする。
|:options|      :opt[ions]                オプションの閲覧と設定を行うために
                                          新たなウィンドウを開く。一覧は機能
                                          順に並べられ、各行にはオプションの
                                          説明とヘルプへのリンクをつけてある。


■行移動
コマンド  移動内容
----------------------------------------
0         行の先頭へ(インデント無視して先頭へ)
^         行の先頭へ
$         行の末尾へ
+         下の行の先頭へ
-         上の行の先頭へ

+         abcdefglllllllllllllll
-         上の行の先頭へ

■
前述同様gをつけると表示上の移動へ（直感的）
ページ移動
ガッと移動したい場合
コマンド	移動内容
ctrl + u	半画面分 上へ
ctrl + d	半画面分 下へ
ctrl + b	一画面分 上へ
ctrl + f	一画面分 下へ
{	段落毎に上へ
}	段落毎に下へ
gg	そのファイルの先頭へ
G	そのファイルの末尾へ
他には:100で行指定で移動できる。
この場合だと、100行目に移動。
単語移動
コマンド	移動内容
w	単語の先頭に進む
b	単語の先頭に戻る
e	単語の末尾に進む
ge	単語の末尾に戻る
単語分を進むか戻るか、さらに大文字もある。
ステップアップ
コマンド	移動内容
W	単語の先頭に進む
B	単語の先頭に戻る
E	単語の末尾に進む
gE	単語の末尾に戻る
違いは次のような単語を一語とみるかどうか
abc.def.ghi
小文字なら5単語 abc . def . ghi
大文字なら1単語 abc.def.ghi
a?iに行きたい場合、
e移動なら5回 a?c?.?f?.?i
E移動なら1回 a?i
一行一文字検索
これホント便利。多用してます。
コマンド	移動内容
f	その行の順方向に一文字検索
F	その行の逆方向に一文字検索
t	その行の順方向に一文字検索(カーソルは文字の手前)
T	その行の逆方向に一文字検索(カーソルは文字の手前)
abcdefg hijklmn
aにカーソルがある場合、
fiで一気にiに移動。
ステップアップ
これとfキーの組み合わせが、本当に便利。
コマンド	移動内容
;	順方向に繰り返し検索
,	逆方向に繰り返し検索
abcdefg abcdefg abcdefg
aから三つ目のeに行く場合、
fe ; ;
そこから二つ目のeに戻る場合
,
検索移動
一般的なページ内文字列検索
コマンド	移動内容
/	順方向に文字列検索
?	逆方向に文字列検索
n	順方向に繰り返し検索
N	逆方向に繰り返し検索
abcde abced abcedf
この場合、/edfで末尾のedfに移動。
複数行にわたって検索可能。
括弧移動
これはdの削除とかyのコピーと合わせて使うと便利。
コマンド	移動内容
%	対となる括弧へ移動
(abc)
カーソルが(から%コマンドで)へ移動
TIPS
ジャンプリストを辿る
ファイル内も移動できるけど、ファイル間の移動に便利。
  直前に編集していたファイルに戻りたいとか。
  今回の記事にはそぐわないかな。。
コマンド	移動内容
        ctrl + o	ジャンプしてきた箇所に戻る
        ctrl + i	ジャンプしてきた箇所に進む
        変更リストを辿る
    abc
自分がしたファイルの変更履歴をたどれる。便利。
        コマンド	移動内容
        g;	変更してきた箇所に戻る
        g,	変更してきた箇所に進む



           NULLIF(RTRIM(W.ChuFlg),'')        AS ChuFlg, 
           RTRIM(W.CHUBang)                  AS CHUBang, 
           NULLIF(RTRIM(W.MadoBan),'')       AS MadoBan, 
           NULLIF(RTRIM(W.KRIKanDAY),'')     AS KRIKanDAY, 
           NULLIF(RTRIM(W.KRIKanTime),'')    AS KRIKanTime, 
           CONVERT(INT, W.TDAYKanryoSu)      AS TDAYKanryoSu, 
       CONVERT(INT, W.KOPUSu)            AS KOPUSu, 
       NULLIF(RTRIM(W.TonyuKJ),'')       AS TonyuKJ, 
       NULLIF(RTRIM(W.YOBI),'')          AS YOBI, 
       NULLIF(RTRIM(W.DataAppDay),'')    AS DataAppDay 
 FROM ${TBL.W1K1} AS W
 CHUBang
 KRIKanTime
 TIPS

